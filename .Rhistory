reject <- reject + 1
}
}
hist(X, probability = TRUE)
curve(dbeta(x,a,b), add = TRUE, col = 'red')
reject <- 0
a <- 2.5
b <- 5.5
n <- 10000
X <- rep(runif(1), n)
pfor(i in 2:n){
U1 <- runif(1)
sigma <- dbeta(U1,a,b)/dbeta(X[i-1],a,b)
U2 <- runif(1)
if(U2 < sigma){
X[i] <- X[i-1] + (U1-X[i-1])
}else{
X[i] <- X[i-1]
reject <- reject + 1
}
}
hist(X, probability = TRUE)
curve(dbeta(x,a,b), add = TRUE, col = 'red')
reject <- 0
a <- 2.5
b <- 5.5
n <- 10000
X <- rep(runif(1), n)
pfor(i in 2:n){
U1 <- runif(1)
sigma <- dbeta(U1,a,b)/dbeta(X[i-1],a,b)
U2 <- runif(1)
if(U2 < sigma){
X[i] <- X[i-1] + (U1-X[i-1])
}else{
X[i] <- X[i-1]
reject <- reject + 1
}
}
hist(X, probability = TRUE)
curve(dbeta(x,a,b), add = TRUE, col = 'red')
reject <- 0
a <- 2.5
b <- 5.5
n <- 10000
X <- rep(runif(1), n)
pfor(i in 2:n){
U1 <- runif(1)
sigma <- dbeta(U1,a,b)/dbeta(X[i-1],a,b)
U2 <- runif(1)
if(U2 < sigma){
X[i] <- X[i-1] + (U1-X[i-1])
}else{
X[i] <- X[i-1]
reject <- reject + 1
}
}
reject <- 0
a <- 2.5
b <- 5.5
n <- 10000
X <- rep(runif(1), n)
for(i in 2:n){
U1 <- runif(1)
sigma <- dbeta(U1,a,b)/dbeta(X[i-1],a,b)
U2 <- runif(1)
if(U2 < sigma){
X[i] <- X[i-1] + (U1-X[i-1])
}else{
X[i] <- X[i-1]
reject <- reject + 1
}
}
hist(X, probability = TRUE)
curve(dbeta(x,a,b), add = TRUE, col = 'red')
reject <- 0
a <- 2.5
b <- 5.5
n <- 10000
X <- rep(runif(1), n)
for(i in 2:n){
U1 <- runif(1)
sigma <- dbeta(U1,a,b)/dbeta(X[i-1],a,b)
U2 <- runif(1)
if(U2 < sigma){
X[i] <- U1
}else{
X[i] <- X[i-1]
reject <- reject + 1
}
}
hist(X, probability = TRUE)
curve(dbeta(x,a,b), add = TRUE, col = 'red')
plot(X, xlim = c(3500,4000), type = 'l')
set.seed(1)
rbeta <- rbeta(n,a,b)
plotdens(rbeta, n = 200, method = "kernel") #naive bedre end gaussian pga mere normal fordelt?
plot(density(rbeta(n,a,b)))
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
n <- sum(x)
if(is.character(x) == TRUE || is.character(p) = TRUE){
stop("You need to have integers or double as input")
}
#Runs up to the size of the vector
for(i in 1:length(p)){
#if(is.character(x[i])==TRUE){
# x[i] <- 0
#}
#if(is.character(p[i])==TRUE){ #" " vil også virke
#  p[i] <- 1/length((x))
#  print(p[i])
#}
#Uses the Pearson chi-squared test for each i
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
#The test value is the sum of those values
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
#HUSK 3.3
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
n <- sum(x)
#if(is.character(x) == TRUE || is.character(p) = TRUE){
#  stop("You need to have integers or double as input")
#}
#Runs up to the size of the vector
for(i in 1:length(p)){
#if(is.character(x[i])==TRUE){
# x[i] <- 0
#}
#if(is.character(p[i])==TRUE){ #" " vil også virke
#  p[i] <- 1/length((x))
#  print(p[i])
#}
#Uses the Pearson chi-squared test for each i
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
#The test value is the sum of those values
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
#HUSK 3.3
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
n <- sum(x)
if(is.character(x) == TRUE || is.character(p) = TRUE){
stop("You need to have integers or double as input")
}
#Runs up to the size of the vector
for(i in 1:length(p)){
#if(is.character(x[i])==TRUE){
# x[i] <- 0
#}
#if(is.character(p[i])==TRUE){ #" " vil også virke
#  p[i] <- 1/length((x))
#  print(p[i])
#}
#Uses the Pearson chi-squared test for each i
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
#The test value is the sum of those values
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
#HUSK 3.3
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
n <- sum(x)
if(is.character(x) == TRUE || is.character(p) == TRUE){
stop("You need to have integers or double as input")
}
#Runs up to the size of the vector
for(i in 1:length(p)){
#if(is.character(x[i])==TRUE){
# x[i] <- 0
#}
#if(is.character(p[i])==TRUE){ #" " vil også virke
#  p[i] <- 1/length((x))
#  print(p[i])
#}
#Uses the Pearson chi-squared test for each i
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
#The test value is the sum of those values
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
#HUSK 3.3
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
nData[2,2] = "hello world"
Goodnessoffittask3 <- function(x,p){
T <- c()
n <- sum(x)
if(is.character(x) == TRUE || is.character(p) == TRUE){
stop("You need to have integers or double as input")
}
#Runs up to the size of the vector
for(i in 1:length(p)){
#if(is.character(x[i])==TRUE){
# x[i] <- 0
#}
#if(is.character(p[i])==TRUE){ #" " vil også virke
#  p[i] <- 1/length((x))
#  print(p[i])
#}
#Uses the Pearson chi-squared test for each i
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
#The test value is the sum of those values
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
#HUSK 3.3
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
if(is.character(x) == TRUE || is.character(p) == TRUE){
stop("You need to have integers or double as input")
}
n <- sum(x)
#Runs up to the size of the vector
for(i in 1:length(p)){
#if(is.character(x[i])==TRUE){
# x[i] <- 0
#}
#if(is.character(p[i])==TRUE){ #" " vil også virke
#  p[i] <- 1/length((x))
#  print(p[i])
#}
#Uses the Pearson chi-squared test for each i
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
#The test value is the sum of those values
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
#HUSK 3.3
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
if(is.character(x) == TRUE || is.character(p) == TRUE){
stop("You need to have integers or double as input")
}
n <- sum(x)
for(i in 1:length(p)){
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
if(is.character(x) == TRUE || is.character(p) == TRUE){
stop("You need to have integers or double as input")
}
n <- sum(x)
for(i in 1:length(p)){
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
nData[3,2] = "hello"
#' @export
#' @return The function returns the chi squared test value T
#' @title Goodness of fit
#' @keywords Chi-squared Goodness_of_fit
#' @usage Goodnessoffittask3(x, p)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples Goodnessoffittask3(c(1,2,3),c(0.33,0.33,0.33)) reads two vectors and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
Goodnessoffittask3 <- function(x,p){
T <- c()
if(is.character(x) == TRUE || is.character(p) == TRUE){
stop("You need to have integers or double as input")
}
n <- sum(x)
for(i in 1:length(p)){
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
data <- rgamma(10000,1)
#' @export
#' @return a probability of a given point d if a d value is given. If the d value is not defined it returns the probability of the quantiles and the mean
#' @title Density estimation
#' @keywords Density_estimation Gaussian_Kernel Sturges_naive
#' @usage estdens(x, d, h, method)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples estdens(rgamma(10000,1), 1, 1, "naive") which returns the probability of 1 with a bandwidth of 1 and with a random gamma distribution with mean 1.
#' @param x is the data set you want to obtain probabilities from
#' @param d is the point in which you want to approximate the probability
#' @param h is the bandwidth which is the width of the categories that you want to the data into.
#' @param method is either naive or kernel depending on which method you want to use.
estdens <- function(x, d = 0, h =0, method = "naive"){
vector <- c()
if (d == 0) { #if no point to find the density is given, the function find the probabilitis of the quantiles and the mean
Q = as.numeric(quantile(x)) #adding the quantiles
Q = append(Q,mean(x)) #adding the mean
Q = sapply(Q, function(q) estdens(x,q,h,method)) #estimates the density of the quanttiles and mean with the same x,h and method.
Quantiles <- matrix(c(Q[1], Q[2], Q[3], Q[4], Q[5], Q[6]),
ncol = 1, byrow = TRUE)
colnames(Quantiles) <- c("Probabilities")
rownames(Quantiles) <- c("Min", "1st quartile", "Median",
"3rd quartile", "Max", "Mean")
return(Quantiles) #returns and prints the table of the founded probabilites.
}
if(method == "naive"){
if (h == 0) { #if no banwitdh is given, it calculates the banwitdh using the Struges.
h = (max(x)-min(x))/(1+log2(length(x)))
} #calculates the density with the naive method
for(i in 1:length(x)) {
if(abs((d-x[i])/h)<1) { #the indecator functino of the naive method
vector <- append(vector,(1/2))
}
}
return((1/(h*length(x)))*sum(vector)) #returns the density of the given point with the naive method.
} else if (method == "kernel"){
if (h == 0) { #if no banwitdh is given, it calculates the banwidth using Silverman's suggestion.
h = 0.9*sd(x)*length(x)^(-1/5)
}
for(i in 1:length(x)){ #the gaussian function for kernel estimator
vector <- append(vector, (1/sqrt(2*pi))*exp(-((d-x[i])/h)^2/2))
}
print(h)
return(1/(length(x)*h)*sum(vector)) #returns the density of the given point with the kernel method.
}
else { #if a wrong method is typed as method(a method which is not naive or kernel)
return("not a specified method")
}
}
estdens(data, method="kernel")
data <- rgamma(10000,1)
#print kun 1 h ved ikke givet h
?print
#' @export
#' @return a probability of a given point d if a d value is given. If the d value is not defined it returns the probability of the quantiles and the mean
#' @title Density estimation
#' @keywords Density_estimation Gaussian_Kernel Sturges_naive
#' @usage estdens(x, d, h, method)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples estdens(rgamma(10000,1), 1, 1, "naive") which returns the probability of 1 with a bandwidth of 1 and with a random gamma distribution with mean 1.
#' @param x is the data set you want to obtain probabilities from
#' @param d is the point in which you want to approximate the probability
#' @param h is the bandwidth which is the width of the categories that you want to the data into.
#' @param method is either naive or kernel depending on which method you want to use.
estdens <- function(x, d = 0, h =0, method = "naive"){
vector <- c()
if (d == 0) { #if no point to find the density is given, the function find the probabilitis of the quantiles and the mean
Q = as.numeric(quantile(x)) #adding the quantiles
Q = append(Q,mean(x)) #adding the mean
Q = sapply(Q, function(q) estdens(x,q,h,method)) #estimates the density of the quanttiles and mean with the same x,h and method.
Quantiles <- matrix(c(Q[1], Q[2], Q[3], Q[4], Q[5], Q[6]),
ncol = 1, byrow = TRUE)
colnames(Quantiles) <- c("Probabilities")
rownames(Quantiles) <- c("Min", "1st quartile", "Median",
"3rd quartile", "Max", "Mean")
return(Quantiles) #returns and prints the table of the founded probabilites.
}
if(method == "naive"){
if (h == 0) { #if no banwitdh is given, it calculates the banwitdh using the Struges.
h = (max(x)-min(x))/(1+log2(length(x)))
} #calculates the density with the naive method
for(i in 1:length(x)) {
if(abs((d-x[i])/h)<1) { #the indecator functino of the naive method
vector <- append(vector,(1/2))
}
}
return((1/(h*length(x)))*sum(vector)) #returns the density of the given point with the naive method.
} else if (method == "kernel"){
if (h == 0) { #if no banwitdh is given, it calculates the banwidth using Silverman's suggestion.
h = 0.9*sd(x)*length(x)^(-1/5)
}
for(i in 1:length(x)){ #the gaussian function for kernel estimator
vector <- append(vector, (1/sqrt(2*pi))*exp(-((d-x[i])/h)^2/2))
}
print(h, quote = FALSE)
return(1/(length(x)*h)*sum(vector)) #returns the density of the given point with the kernel method.
}
else { #if a wrong method is typed as method(a method which is not naive or kernel)
return("not a specified method")
}
}
estdens(data, method="kernel")
data <- rgamma(10000,1)
#print kun 1 h ved ikke givet h
#' @export
#' @return a probability of a given point d if a d value is given. If the d value is not defined it returns the probability of the quantiles and the mean
#' @title Density estimation
#' @keywords Density_estimation Gaussian_Kernel Sturges_naive
#' @usage estdens(x, d, h, method)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @examples estdens(rgamma(10000,1), 1, 1, "naive") which returns the probability of 1 with a bandwidth of 1 and with a random gamma distribution with mean 1.
#' @param x is the data set you want to obtain probabilities from
#' @param d is the point in which you want to approximate the probability
#' @param h is the bandwidth which is the width of the categories that you want to the data into.
#' @param method is either naive or kernel depending on which method you want to use.
estdens <- function(x, d = 0, h =0, method = "naive"){
vector <- c()
if (d == 0) { #if no point to find the density is given, the function find the probabilitis of the quantiles and the mean
Q = as.numeric(quantile(x)) #adding the quantiles
Q = append(Q,mean(x)) #adding the mean
Q = sapply(Q, function(q) estdens(x,q,h,method)) #estimates the density of the quanttiles and mean with the same x,h and method.
Quantiles <- matrix(c(Q[1], Q[2], Q[3], Q[4], Q[5], Q[6]),
ncol = 1, byrow = TRUE)
colnames(Quantiles) <- c("Probabilities")
rownames(Quantiles) <- c("Min", "1st quartile", "Median",
"3rd quartile", "Max", "Mean")
return(Quantiles) #returns and prints the table of the founded probabilites.
}
if(method == "naive"){
if (h == 0) { #if no banwitdh is given, it calculates the banwitdh using the Struges.
h = (max(x)-min(x))/(1+log2(length(x)))
} #calculates the density with the naive method
for(i in 1:length(x)) {
if(abs((d-x[i])/h)<1) { #the indecator functino of the naive method
vector <- append(vector,(1/2))
}
}
return((1/(h*length(x)))*sum(vector)) #returns the density of the given point with the naive method.
} else if (method == "kernel"){
if (h == 0) { #if no banwitdh is given, it calculates the banwidth using Silverman's suggestion.
h = 0.9*sd(x)*length(x)^(-1/5)
}
for(i in 1:length(x)){ #the gaussian function for kernel estimator
vector <- append(vector, (1/sqrt(2*pi))*exp(-((d-x[i])/h)^2/2))
}
print(h, max.levels = 1)
return(1/(length(x)*h)*sum(vector)) #returns the density of the given point with the kernel method.
}
else { #if a wrong method is typed as method(a method which is not naive or kernel)
return("not a specified method")
}
}
estdens(data, method="kernel")
data <- rgamma(10000,1)
#print kun 1 h ved ikke givet h
library(temp2)
library(temp2)
