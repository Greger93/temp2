mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1)) #Tilføj i (tallet)
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
return(lm)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- 0
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])))
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])))
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
Data
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - length(X[1,])-1  - 1
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - length(X[1,])-1  - 1+2
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - length(mf[1,])-1  - 1
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - length(mf[1,])-1  - 1
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
print(mf)
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - length(mf[1,])-1  - 1
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
print(length(mf[1,])
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - length(mf[1,])-1  - 1
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
print(length(mf[1,]))
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - length(mf[1,])-1  - 1
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
print(length(mf[,1]))
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
Data <-read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
#Data
#Data[2,2]
lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
summary(lm(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5]))
W <- c()
Q <- c()
Matrixregression <- function(formula){
#Kode fra view lm
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
#Vores kode
X <- rep(1, length(mf[,1])) #En vektorer af 1-taller
Y <- mf[,1] #Den afhængige variable
for(i in 2:length(mf[1,])){
X <- cbind(X, mf[,i])
}
Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y #lm function
Q<-append(Q,"Intercept")
for(i in 1:length(Bhat[,1])){
W <- append(W, Bhat[i,])
}
for(i in 2:length(Bhat[,1])){
Q <- append(Q, paste0("Predictor ", i-1))
}
lm <- matrix(W, ncol = 1, byrow = TRUE)
colnames(lm) <- c("Coefficients")
rownames(lm) <- c(Q)
lm <- as.table(lm)
print(lm)
ReSE <- 0
R2 <- 0
R2adj <- 0
Fstat <- 0
df <- length(mf[,1]) - (length(mf[1,])-1)  - 1
pval <- 0
Est <- 0
se <- 0
tval <- 0
Pr <- 0
test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval, Est, se, tval, Pr), ncol = 1, byrow = TRUE)
colnames(test) <- c("Estimations")
rownames(test) <- c("Residual standard error", "R2", "R2adj", "F-statistic", "Degrees of freedom", "p-value", "Estimate", "Standard error", "t-value", "Pr")
test <- as.table(test)
print(length(mf[,1]))
return(test)
ehat <- Y - X%*%Bhat
}
Matrixregression(formula = Data[,4]~Data[,1]+Data[,2]+Data[,3]+Data[,5])
