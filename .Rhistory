for(i in 1:length(p)){
if(is.double(x[i])==FALSE){
x[i] = 0
}else{
#if(p[i] == NULL){
# p[i] = 1/length(x)
#}
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
}
return(sum(T))
}
abe(nData[,2],nData[,3])
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
abe <- function(x,p){
T <- c()
n <- sum(x)
for(i in 1:length(p)){
if(is.double(x[i])==FALSE){
x[i] = 0
}else{
#if(p[i] == NULL){
# p[i] = 1/length(x)
#}
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
}
return(sum(T))
}
abe(nData[,2],nData[,3])
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
abe <- function(x,p){
T <- c()
n <- sum(x)
for(i in 1:length(p)){
#if(is.double(x[i])==FALSE){
#   x[i] = 0
#  }else{
#if(p[i] == NULL){
# p[i] = 1/length(x)
#}
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
#  }
}
return(sum(T))
}
abe(nData[,2],nData[,3])
is.double(0.04)
is.double(0.14)
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
abe <- function(x,p){
T <- c()
n <- sum(x)
for(i in 1:length(p)){
if(is.double(x[i])==FALSE){
x[i] = 0
}else{
#if(p[i] == NULL){
# p[i] = 1/length(x)
#}
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
}
}
return(sum(T))
}
abe(nData[,2],nData[,3])
is.double(30)
c <- seq(1:10, 0.05)
seq(1:20:0.1)
seq(1:10)
sapply(1:20,function(x) 0.5)
Goodnessoffitask3(nData[,2],s)
Goodnessoffittask3(nData[,2],s)
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
Goodnessoffittask3(nData[,2],s)
Goodnessoffittask3 <- function(x,p){
T <- c()
n <- sum(x)
for(i in 1:length(p)){
#if(is.double(x[i])==FALSE){
#   x[i] = 0
# }else{
#if(p[i] == NULL){
# p[i] = 1/length(x)
#}
T <- append(T,(x[i]-n*p[i])^2/(n*p[i]))
#  }
}
return(sum(T))
}
Goodnessoffittask3(nData[,2],nData[,3])
Goodnessoffittask3(nData[,2],nData[,3])
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
Goodnessoffittask3(nData[,2],s)
Goodnessoffittask3(nData[,2],nData[,3])
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
Goodnessoffittask3(nData[,2],s)
data <- c(12,5,19,7,7)
n <- sum(data)
chisq.test(data)
1 - pchisq(12.8, df = 4)
chisq.test(data)
chisq.test(nData[,2])
Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
1 - pchisq(12.8, df = 4)
hist(T)
hist(nData[,2])
hist(s,add=TRUE)
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
hist(nData[,2])
hist(s,add=TRUE)
abline(a = sum(nData[,2]*1/length(nData[,2], b = 0, col = 'green')
abline(a = sum(nData[,2])*1/length(nData[,2], b = 0, col = 'green')
plot(2*x)
abline(a = sum(nData[,2])*1/length(nData[,2], b = 0, col = 'green')
)
hist(nData[,2])
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
hist(nData[,2], breaks = 20)
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
hist(nData[,2],seq(1:20), breaks = 20)
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
hist(nData[,2], breaks = 20, probability = FALSE)
hist(nData[,2], probability = FALSE)
hist(nData[,2], probability = TRUE)
hist(nData[,2], freq = TRUE)
hist(nData[,2], freq = FALSE)
nData[,2]
plot(nData[,2])
1 - pchisq(T, length(nData[,2])-1)
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
plot(nData[,2], ylab = 0:30)
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
plot(nData[,2], ylim = 0:30)
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
plot(nData[,2], ylim = c(0,30))
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
plot(nData[,2], ylim = c(0,30), xlim = c(1,20))
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
plot(nData[,2], ylim = c(0,max(nData[,2])))
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
max(nData[,2])
dchisq(nData[,2],19)
#description
#' @export
#' @return
#' @title Title is this
#' @keywords Chi-squared probability distribution estimation and monte Carlo
#' @usage chi.probability(x, df = 1, n = 1, plot = FALSE)
#' @author Sebastian Gregersen
#Definer parametrene for funktion
#' @param x is ...
#' @param  df is degrees of dreedom in the Chi square distribution
#' ...
chi.probability <- function(x, df, n){
chisq <- rchisq(n,df)
p <- ecdf(chisq)
return(1-p(x))
}
chi.probability(1.5,2,10000)
#Task 4
nData <-read.table("https://raw.githubusercontent.com/haghish/ST516/5e00636e072db393354d468da5d53a7b7bf5a8d8/data/soccer.txt")
#nData
#sum(nData[,3])
#H0, the cards are uniformly distributed
#H1, the cards are not uniformly distributed?
s <- sapply(1:20,function(x) 1/length(nData[,2]))
T <- Goodnessoffittask3(nData[,2],s)
1 - pchisq(T, length(nData[,2])-1)
#It is seen from the result that it is not significant. The cards are
#therefore not uniformly distributed.
plot(nData[,2], ylim = c(0,max(nData[,2])))
abline(a = sum(nData[,2])*1/length(nData[,2]), b = 0, col = 'green')
#Task 5
chi.probability(75,19,10000)
chi.probability(20,19,10000)
chi.probability(T,19,10000)
chi.probability(T,19,100000)
chi.probability(T,20,100000)
chi.probability(T,19,100000)
1 - pchisq(T, length(nData[,2])-1)
1 - pchisq(T, length(nData[,2])-1)
T <- Goodnessoffittask3(nData[,2],s)
T
chi.probability(T,19,100000)
1 - pchisq(T, length(nData[,2])-1)
chi.probability(T,19,10000000)
1 - pchisq(T, length(nData[,2])-1)
chi.probability(T,19,100000000)
Goodnessoffittask3(nData[,2],nData[,3])
chi.probability(1.5,2,10000)
qchisq(0.95,19)
Roxygen
View roxygen2
View(roxygen2)
?roxygen2
??roxygen2
install.packages("roxygen2")
View roxygen2
View(roxygen2)
?roxygen2
#' @export
#' @return The function returns the probability that the chi square distribution with a given degree of freedom is larger than a given x
#' @title Chi probability
#' @keywords Chi-squared probability distribution estimation and monte Carlo
#' @usage chi.probability(x, df = 1, n = 1, plot = FALSE)
#' @author Sebastian Gregersen
#' @param x is the parameter that you want the chi square distribution to be larger than
#' @param df is degrees of dreedom in the Chi square distribution
#' @param n is the amount of generated data from the chi square distribution
chiprobability <- function(x, df, n){
chisq <- rchisq(n,df)
p <- ecdf(chisq)
return(1-p(x))
}
1+1
chiprobability(1.5, 2, 10000)
chiprobability <- function(x, df, n){
chisq <- rchisq(n,df)
p <- ecdf(chisq)
return(1-p(x))
}
chiprobability(1.5, 2, 10000)
Goodnessoffittask3(nData[,2],nData[,3])
cars
attach(cars)
Goodnessoffittask3(cars$speed, cars$dist)
roxygenise()
roxygenize()
roxygenize
roxygen2::roxygenise()
#' @export
#' @return The function returns the probability that the chi square distribution with a given degree of freedom is larger than a given x
#' @title Chi probability
#' @keywords Chi-squared probability distribution estimation and monte Carlo
#' @usage chiprobability(x, df, n)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @example chiprobability(1.5, 2, 10000) which return that there is approximately 47 percent chance that the chi square distribution is larger than 1.5 with 2 degrees of freedom
#' @param x is the parameter that you want the chi square distribution to be larger than
#' @param df is degrees of dreedom in the Chi square distribution
#' @param n is the amount of generated data from the chi square distribution
roxygen2::roxygenise()
#Task 1
montecarlo <- function(n){
estimations <- c()
for(i in 1:n) {
x <- runif(1)
integral <- sin(pi*x) #Radianer/grader
estimations <- c(integral, estimations)
}
phit <- sum(estimations)/n
se <- sd(estimations)/sqrt(n)
print(var(estimations)) #divider med n?
print(sd(estimations))
print(sd(estimations)/sqrt(n))
confidence <- qnorm(1-(1-0.95)/2)
print(mean(estimations) + se*confidence)
print(mean(estimations) - se*confidence)
return(phit)
}
montecarlo(10000)
Buffontask2(100,1,1)
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi <- append(estpi,sapply(seq(10,10000,10),function(N) Buffontask2(N,1,1)))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi <- append(estpi,sapply(seq(10,1000,10),function(N) Buffontask2(N,1,1)))
plot(estpi)
abline(a = pi, b = 0, col = 'green')
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi <- append(estpi,sapply(seq(10,1000,10),function(N) Buffontask2(N,1,1)))
plot(estpi)
abline(a = pi, b = 0, col = 'green')
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
plot(estpi)
length(estpiu)
length(estpi)
plot(estpi, xlim = c(0,length(estpi)), ylim = c(0, 5))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi <- append(estpi,sapply(seq(10,1000,10),function(N) Buffontask2(N,1,1)))
plot(estpi, xlim = c(1,length(estpi)), ylim = c(1, 4))
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi <- append(estpi,sapply(seq(10,1000,10),function(N) Buffontask2(N,1,1)))
plot(estpi, ylim = c(1, 4))
abline(a = pi, b = 0, col = 'green')
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi <- append(estpi,sapply(seq(10,1000,10),function(N) Buffontask2(N,1,1)))
plot(estpi,xlim = c(1,length(estpi)), ylim = c(min(estpi), max(estpi)))
abline(a = pi, b = 0, col = 'green')
Bootstraptask1(500,Data$Sport,Data$Grades)
#' @export
#' @return
#' @title Goodness of fit
#' @keywords Bootstrap correlation
#' @usage Bootstraptask1(n,x,y)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @example Goodnessoffittask3(nData[,2],nData[,3]) reads two vectors from the nData which is the data of the soccer cards and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
#' @param n
Bootstraptask1 <- function(n,x,y){
Corr <- cor(x,y)
sample.size <- length(x)
storage <- numeric(n)
for(i in 1:n){
j <- sample(1:sample.size, size = sample.size, replace = TRUE)
V1 <- x[j]
V2 <- y[j]
storage[i] <- cor(V1, V2)
}
se <- sd(storage)/sqrt(sample.size)
boot.Corr <- mean(storage)
bias <- boot.Corr - Corr
confidence <- qnorm(1-(1-0.95)/2)
c1 <- mean(storage) + se*confidence
c2 <- mean(storage) - se*confidence
af <- matrix(c(se, bias, c1, c2, boot.Corr), ncol = 1, byrow = TRUE)
colnames(o) <- c("Estimations")
rownames(o) <- c("Standard error", "Bias", "conf interval 1", "conf interval 2", "Correlation")
af <- as.table(af)
return(af)
print(Corr)
print(se)
print(bias)
print(c1)
print(c2)
return(boot.Corr)
}
Bootstraptask1(500,Data$Sport,Data$Grades)
#' @export
#' @return
#' @title Goodness of fit
#' @keywords Bootstrap correlation
#' @usage Bootstraptask1(n,x,y)
#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen
#' @example Goodnessoffittask3(nData[,2],nData[,3]) reads two vectors from the nData which is the data of the soccer cards and then returns the Goodness of fit test value
#' @param x is a vector of a given data set that you want to test for a given probability
#' @param p is the given probability of a distribution for each data of x
#' @param n
Bootstraptask1 <- function(n,x,y){
Corr <- cor(x,y)
sample.size <- length(x)
storage <- numeric(n)
for(i in 1:n){
j <- sample(1:sample.size, size = sample.size, replace = TRUE)
V1 <- x[j]
V2 <- y[j]
storage[i] <- cor(V1, V2)
}
se <- sd(storage)/sqrt(sample.size)
boot.Corr <- mean(storage)
bias <- boot.Corr - Corr
confidence <- qnorm(1-(1-0.95)/2)
c1 <- mean(storage) + se*confidence
c2 <- mean(storage) - se*confidence
af <- matrix(c(se, bias, c1, c2, boot.Corr), ncol = 1, byrow = TRUE)
colnames(af) <- c("Estimations")
rownames(af) <- c("Standard error", "Bias", "conf interval 1", "conf interval 2", "Correlation")
af <- as.table(af)
return(af)
print(Corr)
print(se)
print(bias)
print(c1)
print(c2)
return(boot.Corr)
}
Bootstraptask1(500,Data$Sport,Data$Grades)
estpi = c()
estpi <- append(estpi,Buffontask2(1,1,1))
estpi <- append(estpi,sapply(seq(10,1000,10),function(N) Buffontask2(N,1,1)))
plot(estpi,xlim = c(1,length(estpi)), ylim = c(min(estpi), max(estpi)))
abline(a = pi, b = 0, col = 'green')
