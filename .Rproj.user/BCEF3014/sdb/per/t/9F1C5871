{
    "contents" : "#' @export\n#' @return 2 tables, the first with coefficients for a linear model fitting the data points for each of those coefficents there is a standard error, t-value and p-value. The second table returns the residual standard error, R^2, R^2adj, F-statistic, degrees of freedom, p-value.\n#' @title Multiple linear regression\n#' @keywords Matrix_regression formula Multiple_linear_regression Residual\n#' @usage Matrixregression(dependent ~ predictor1 + predictor2 + ...)\n#' @author Sebastian Gregersen and Jeppe Korsgaard Kristensen\n#' @examples Matrixregression(cars$speed~cars$dist) which returns a linear function of speed dependent on the break distance.\n#' @param formula is the dependent variable as a function of the predictors.\n#' @param Dependent is the variable you want to check if it fits a linear model of the predictors\n#' @param Predictors are the variables that you want to see if there is a linear model between them and the dependent variable\n\nMatrixregression <- function(formula){\n  V <- c()\n  Sde <- c()\n  tvalue <- c()\n  #Code from View(lm) which creates a matrix mf of the given dependent variable og and the predictors.\n  cl <- match.call()\n  mf <- match.call(expand.dots = FALSE)\n  m <- match(c(\"formula\"), names(mf), 0L)\n  mf <- mf[c(1L, m)]\n  mf$drop.unused.levels <- TRUE\n  mf[[1L]] <- quote(stats::model.frame)\n  mf <- eval(mf, parent.frame())\n\n  #Creates a vector of ones with the same length as the rest of the coloumns of mf.\n  X <- rep(1, length(mf[,1]))\n  #Creates a vector of the dependent variable\n  Y <- mf[,1]\n  #Adds the rest of the coloumns of mf to X\n  for(i in 2:length(mf[1,])){\n    X <- cbind(X, mf[,i])\n  }\n  #Creates a vector of the coefficients of the predictors and the intercept\n  Bhat <- solve(t(X)%*%X)%*%t(X)%*%Y\n  #Creates a vector which includes the names for the table\n  Q<-\"Intercept\"\n  for(i in 2:length(Bhat[,1])){\n    Q <- append(Q, paste0(\"Predictor \", i-1))\n  }\n\n  #The estimated dependent variable\n  Yhat <- X%*%Bhat\n  #The error which is the difference between the dependent variable and the estimated dependent variable\n  ehat <- Y - Yhat\n  #Finds the residual sum of squares\n  RSS <- sum(ehat^2)\n  #Finds the total corrected sum of squares\n  for(i in 1:length(Y)){\n    V <- append(V, (Y[i]-mean(Y))^2)\n  }\n  SST <- sum(V)\n  #Finds the regression sum of squares\n  SSreg <- SST - RSS\n  #Finds the degrees of freedom which is n-p-1\n  df <- length(mf[,1]) - (length(mf[1,])-1)  - 1\n  #Finds the residual standard error\n  ReSE <- sqrt(RSS/df)\n  #The G matrix is used to find the standard error\n  G <- (ReSE^2*solve(t(X)%*%X))\n  for(i in 1:length(G[,1])){\n    #The standard error for each predictor and intercept is the square root of the diagonal\n    Sde <- append(Sde, sqrt(G[i,i]))\n  }\n  #Finds the t-value from the nul-hypothesis which is that there does not exist a linear relation between the predictors and the dependent variable\n  for(i in 1:length(G[,1])){\n    tvalue <- append(tvalue, (Bhat[i,]-0)/Sde[i]) #nul hypotese der er ikke nogen sammenhÃ¦ng mellem variabler\n  }\n  #Finds the p value for each predictor and the intercept according to the t-distribution.\n  Pr <- 2*pt(-abs(tvalue), df)\n  #Creates a matrix to print the values for each predictor and the intercept\n  lm <- matrix(c(Bhat,Sde, tvalue, Pr), ncol = 4, nrow = length(X[1,]))\n  colnames(lm) <- c(\"Estimate\", \"Std. Error\", \"t value\", \"Pr(>|t|)\")\n  rownames(lm) <- c(Q)\n  lm <- as.table(lm)\n  print(lm)\n  #Finds R2 which is the coefficient of determination of the regression line\n  R2 <- SSreg/SST\n  #Finds an adjusted R2 value\n  R2adj <- 1-((RSS/df)/(SST/(length(mf[,1])-1)))\n  #Finds the f-statistic\n  Fstat <- (SSreg/(length(mf[1,])-1))/(RSS/df)\n  #Finds the p-value for a significance level of 5 % of the F distribution\n  pval <- 1-pf(Fstat,length(mf[1,])-1,df) #???\n  #Creates a matrix to print the data\n  test <- matrix(c(ReSE, R2, R2adj, Fstat, df, pval), ncol = 1, byrow = TRUE)\n  colnames(test) <- c(\"Estimations\")\n  rownames(test) <- c(\"Residual standard error\", \"R2\", \"R2adj\", \"F-statistic\", \"Degrees of freedom\", \"p-value\")\n  test <- as.table(test)\n  return(test)\n}\n",
    "created" : 1465544320727.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2192093186",
    "id" : "9F1C5871",
    "lastKnownWriteTime" : 1465544338,
    "path" : "~/temp2/R/Matrixregression.R",
    "project_path" : "R/Matrixregression.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}